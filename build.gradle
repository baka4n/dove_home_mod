buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)' apply false
    id 'org.parchmentmc.librarian.forgegradle' version '1.+' apply false
}

subprojects {
    apply plugin: "net.minecraftforge.gradle"
    apply plugin: "org.parchmentmc.librarian.forgegradle"
    apply plugin: 'org.spongepowered.mixin'
    apply plugin: "eclipse"
    apply plugin: "idea"

    group = mod_group_id
    version = mod_version

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(17)

    }

    apply from: rootProject.file("gradle/repositories.gradle")

    sourceSets.main.resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    }
}


subprojects {
    base {
        archivesName = project.name
    }

    minecraft {
        // The mappings can be changed at any time and must be in the following format.
        // Channel:   Version:
        // official   MCVersion             Official field/method names from Mojang mapping files
        // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
        //
        // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
        // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
        //
        // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
        // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
        //
        // Use non-default mappings at your own risk. They may not always work.
        // Simply re-run your setup task after changing the mappings to update your workspace.
        mappings channel: mapping_channel, version: mapping_version

        // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
        // In most cases, it is not necessary to enable.
        // enableEclipsePrepareRuns = true
        // enableIdeaPrepareRuns = true

        // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
        // It is REQUIRED to be set to true for this template to function.
        // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
        copyIdeResources = true

        // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
        // The folder name can be set on a run configuration using the "folderName" property.
        // By default, the folder name of a run configuration is the name of the Gradle project containing it.
        // generateRunFolders = true

        // This property enables access transformers for use in development.
        // They will be applied to the Minecraft artifact.
        // The access transformer file can be anywhere in the project.
        // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
        // This default location is a best practice to automatically put the file in the right place in the final jar.
        // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

        // Default run configurations.
        // These can be tweaked, removed, or duplicated as needed.
        runs {
            // applies to all the run configs below
            configureEach {
                workingDirectory file('run')

                // Recommended logging data for a userdev environment
                // The markers can be added/remove as needed separated by commas.
                // "SCAN": For mods scan.
                // "REGISTRIES": For firing of registry events.
                // "REGISTRYDUMP": For getting the contents of all registries.
                property 'forge.logging.markers', 'REGISTRIES'


                // Recommended logging level for the console
                // You can set various levels here.
                // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
                property 'forge.logging.console.level', 'debug'

                mods {
                    "${project.name}" {
                        source sourceSets.main
                    }
                }
            }

            client {
                // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
                property 'forge.enabledGameTestNamespaces', project.name
            }

            server {
                property 'forge.enabledGameTestNamespaces', project.name
                args '--nogui'
            }

            // This run config launches GameTestServer and runs all registered gametests, then exits.
            // By default, the server will crash when no gametests are provided.
            // The gametest system is also enabled by default for other run configs under the /test command.
            gameTestServer {
                property 'forge.enabledGameTestNamespaces', project.name
            }

            data {
                // example of overriding the workingDirectory set in configureEach above
                workingDirectory project.file('run-data')

                // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
                args '--mod', project.name, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            }
        }
    }

    mixin {
        add sourceSets.main, "${project.name}.refmap.json"

        config "${project.name}.mixins.json"
    }



    apply from: rootProject.file("gradle/dependenciesPath/minecraft.gradle")
    apply from: rootProject.file("gradle/dependenciesPath/annotation.gradle")

// Example for how to get properties into the manifest for reading at runtime.
    tasks.named('jar', Jar).configure {
        manifest {
            attributes([
                    "Specification-Title": project.name,
                    "Specification-Vendor": mod_authors,
                    "Specification-Version": "1", // We are version 1 of ourselves
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.jar.archiveVersion,
                    "Implementation-Vendor": mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }

        // This is the preferred method to reobfuscate your jar file
        finalizedBy 'reobfJar'
    }

    tasks.named('processResources', ProcessResources).configure {
        var replaceProperties = [
                minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
                forge_version: forge_version, forge_version_range: forge_version_range,
                loader_version_range: loader_version_range,
                mod_id: project.name, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                mod_authors: mod_authors, mod_description: mod_description,
        ]

        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }
    }
}

