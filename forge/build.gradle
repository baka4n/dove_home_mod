plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

loom {
    accessWidenerPath = file("src/main/resources/dovehomemod.accesswidener")
    forge {
        mixinConfig "dovehomemod.mixins.json", "dovehomemod.chunk.mixin.json"
//        accessTransformer(file("src/main/resources/META-INF/accesstransformer.cfg"))
        convertAccessWideners.set(true)
        runs {
            create("dataGen") {
                data()
                programArgs("--all", "--mod", "dovehomemod")
                programArgs("--output", project(":dovehomemod").file("src/main/generated/resources").absolutePath)
            }
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

sourceSets {
    main {
        resources {
            srcDirs += project(":dovehomemod").file("src/main/generated/resources").absolutePath
            exclude ".cache"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.2.1"))
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modImplementation(include("software.bernie.geckolib:geckolib-forge-1.19:3.1.40"))
//    modApi "me.shedaniel.cloth:cloth-config-forge:8.3.103"
    modImplementation(include(fileTree(dir: "../libs", includes: ["*.jar"])))
    modImplementation fileTree(dir: "../mods", includes: ["*.jar"])
//    modImplementation("curse.maven:natures-aura-306626:4613484")
    modImplementation("de.ellpeck.naturesaura:NaturesAura:38.2.217") {
        transitive false
    }
    modImplementation("vazkii.patchouli:Patchouli:1.19.2-77")
    modImplementation("vazkii.botania:Botania:1.19.2-440-FORGE")
    modImplementation("top.theillusivec4.curios:curios-forge:1.19.2-5.1.4.3")
    modImplementation("dev.latvian.mods:kubejs-forge:1902.6.2-build.42")
    modImplementation(include("io.github.dovehome:bakalib:1.0.0.21"))
    modImplementation(include("curse.maven:citadel-331936:4556677"))
    modImplementation(include("curse.maven:zerocore-247921:4702621"))
//    modImplementation("dev.ftb.mods:ftb-quests-forge:1902.5.7-build.326")

//    common(project(path: ":common", configuration: "namedElements")) { transitive false }
//    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}
//
//sourcesJar {
//    def commonSources = project(":common").sourcesJar
//    dependsOn commonSources
//    from commonSources.archiveFile.map { zipTree(it) }
//}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url rootProject.file("rootmaven")
        }
    }
}
